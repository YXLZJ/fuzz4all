#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <functional>

int main() {
    std::vector<std::pair<char, int>> v = {{'a', 1}, {'b', 2}, {'c', 3}};
    
    auto sum_of_values = [](const std::vector<std::pair<char, int>>& vec) {
        return std::accumulate(vec.begin(), vec.end(), 0,
                               [](int acc, const std::pair<char, int>& p) {
                                   return acc + p.second;
                               });
    };
    
    auto max_value = [](const std::vector<std::pair<char, int>>& vec) {
        return *max_element(vec.begin(), vec.end(),
                            [](const std::pair<char, int>& p1, const std::pair<char, int>& p2) {
                                return p1.second < p2.second;
                            });
    };
    
    auto min_value = [](const std::vector<std#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <functional>

int main() {
    std::vector<std::pair<char, int>> v = {{'a', 1}, {'b', 2}, {'c', 3}};
    
    auto sum_of_values = [](const std::vector<std::pair<char, int>>& vec) {
        return std::accumulate(vec.begin(), vec.end(), 0,
                               [](int acc, const std::pair<char, int>& p) {
                                   return acc + p.second;
                               });
    };
    
    auto max_value = [](const std::vector<std::pair<char, int>>& vec) {
        return *max_element(vec.begin(), vec.end(),
                            [](const std::pair<char, int>& p1, const std::pair<char, int>& p2) {
                                return p1.second < p2.second;
                            });
    };
    
    auto min_value = [](const std::vector<std::pair<char, int>>& vec) {
        return *min_element(vec.begin(), vec.end(),
                            [](const std::pair<char, int>& p1, const std::pair<char, int>& p2) {
                                return p1.second < p2.second;
                            });
    };
    
    auto sum = sum_of_values(v);
    auto max = max_value(v).first;
    auto min = min_value(v).first;
    
    std::cout << "Sum: " << sum << "\n";
    std::cout << "Max value character: " << max << "\n";
    std::cout << "Min value character: " << min << "\n";
}