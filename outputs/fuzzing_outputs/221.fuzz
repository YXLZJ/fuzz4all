#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>
#include <iterator>
#include <utility>

int main() {
    std::pair<char, int> arr[] = {{'a', 1}, {'b', 2}, {'c', 3}};
    
    auto sum_values = [](const std::vector<std::pair<char, int>>& vec) {
        return std::accumulate(vec.begin(), vec.end(), 0,
            [] (int acc, const std::pair<char, int>& p) {
                return acc + p.second;
            });
    };
    
    auto max_value = [](const std::vector<std::pair<char, int>>& vec) {
        return *max_element(vec.begin(), vec.end(),
            [] (const std::pair<char, int>& a, const std::pair<char, int>& b) {
                return a.second < b.second;
            });
    };
    
    auto result = sum_values({arr});
    std::cout << "Sum of values: " << result << "\n";
    std::cout << "Maximum value: " << max_value(std::vector<std::pair<char, int>>(arr, arr + 3)) << "\n";
    
    return 0;
}