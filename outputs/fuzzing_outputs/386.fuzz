#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <iterator>

int main() {
    std::vector<std::pair<char, int>> data = {{'a', 1}, {'b', 2}, {'c', 3}};
    
    auto sum_values = [](const std::vector<std::pair<char, int>>& v) -> int {
        return std::accumulate(v.begin(), v.end(), 0,
                               [](int acc, const std::pair<char, int>& p) {
                                   return acc + p.second;
                               });
    };
    
    auto max_value = *std::max_element(data.begin(), data.end(), 
                                      [](const std::pair<char, int>& a, const std::pair<char, int>& b) -> bool {
                                          return a.second > b.second;
                                      });
    
    auto min_value = *std::min_element(data.begin(), data.end(), 
                                      [](const std::pair<char, int>& a, const std::pair<char, int>& b) -> bool {
                                          return a.second < b.second;
                                      });
    
    std::cout << "Sum of values: " << sum_values(data) << '\n';
    std::cout << "Max value pair: (" << max_value.first << ", " << max_value.second << ")\n";
    std::cout << "Min value pair: (" << min_value.first << ", " << min_value.second << ")\n";
    
    return 0;
}