#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::string> words{"hello", "world", "complexity"};
    
    // Using C++17 structured binding to unpack a tuple
    for (auto [word, length] : std::transform(words.begin(), words.end(), words.begin(), 
        [](const auto& w) { return std::make_tuple(w, w.size()); })) {
        std::cout << word << ": " << length << '\n';
    }
    
    // Using C++17 if constexpr for compile-time conditionals
    if constexpr (std::is_same<decltype(words[0]), std::string>::value) {
        std::cout << "The first element is a string.\n";
    } else {
        std::cout << "The first element is not a string.\n";
    }
    
    return 0;
}