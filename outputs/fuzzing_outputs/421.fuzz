#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::string> words = {"apple", "banana", "cherry", "date"};
    
    // Use C++17 structured binding to iterate over vector elements and their indices
    for (auto [index, word] : std::views::iota(words.begin(), words.end()) | std::views::transform([](const auto& it) { return std::pair{std::distance(words.begin(), it), *it}; })) {
        // Use C++17 if constexpr to conditionally print the index and word based on whether the index is even or odd
        if constexpr (index % 2 == 0) {
            std::cout << "Index: " << index << ", Word: " << word << '\n';
        } else {
            std::cout << "Odd Index: " << index << ", Word: " << word << '\n';
        }
    }
    
    return 0;
}