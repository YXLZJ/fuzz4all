#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

template<typename T>
class Complex {
public:
    T real, imaginary;

    Complex(T r = 0.0, T i = 0.0) : real(r), imaginary(i) {}

    template <typename U>
    friend ostream& operator<< (ostream &out, const Complex<U>& c);
};

template<typename T>
ostream& operator<< (ostream &out, const Complex<T>& c) {
    out << "(" << c.real << ", " << c.imaginary << ")";
    return out;
}

int main() {
    vector<Complex<double>> complexNumbers = {{1.0, 2.0}, {-3.5, 4.7}};

    for (const auto& num : complexNumbers) {
        cout << num << endl;
    }

    return 0;
}